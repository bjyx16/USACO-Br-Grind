//Concert Tickets
#include <iostream>
#include <vector>
#include <set>
using namespace std;
 
int main(){
    int n,m;
    cin>>n>>m;
    multiset<int> price;
    for (int i=0;i<n;++i){
        int temp;
        cin>>temp;
        price.insert(temp);
    }

    for (int i=0;i<m;++i){
        int cust;
        cin>>cust;
        if (!price.size()){
            cout<<-1;
        }else{
            multiset<int>::iterator x=price.upper_bound(cust);
            if (x==price.begin()){
                cout<<-1;
            }else{
                x--;
                cout<<*x;
                price.erase(x);
            }
        }
        cout<<"\n";
    }
    return 0;
}

/*

Failed bc time complexity O(nm) > 10^9
Should be right in theory as long as don't miss edge cases but something is very very wrong with this code and idk what it is but let's try it using a set

Takeaways: 
- Carefully consider edge cases

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
int main(){
    int n,m;
    cin>>n>>m;
    vector<int> price(n);
    int cust;
    
    for (int i=0;i<n;i++){
        cin>>price[i];
    }
    sort(price.begin(),price.end());
    for (int i=0;i<m;i++){
        cin>>cust;
        bool flag=0;
        //cout<<cust<<" ";
        if(price.size()==0){
            cout<<-1<<"\n";
        }
        
        for(vector<int>::iterator it=price.begin();it!=price.end();++it){
            if (*it >= cust && it!=price.begin()){
                if (*it==cust){
                    cout<<*it;
                    break;
                }else{
                    cout<<*(it-1);
                    price.erase(it-1);
                    break;
                }
                flag=1;
            }else if (*it > cust && it==price.begin()){
                cout<<-1;
                flag=1;
                break;
            }
        }
        if (flag==0){
            cout<<*(price.end()-1);
        }
        cout<<"\n";
        
    }
    
    return 0;
}
*/
